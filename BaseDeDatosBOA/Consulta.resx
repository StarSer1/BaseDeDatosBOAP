<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANQWAADUFgAAAAAAAAAA
        AAAAAAAnAAAAtQAAAPoAAADjAAAAdwAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAALUAAAD/AAAA/wAAAP8AAAD5AAAAigAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAjAAAAAkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAjAAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHcAAAD5AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD8AAAAjAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAIoAAAD8AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD8AAAAjAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAANAAAAFgAA
        ABcAAAAQAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAA
        AIwAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAjAAAAAkAAAAAAAAAAwAAACsAAABsAAAApAAA
        AMYAAADWAAAA2AAAAMwAAACwAAAAfQAAADwAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACQAAAIwAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAjQAAAD0AAACZAAAA5gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8QAAALMAAABJAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAIwAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAA8gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAACQAAAAFgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAIsAAAD8AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADrAAAAuwAAAI4AAAB2AAAAdgAAAI0AAAC5AAAA6QAAAP8AAAD/AAAA/wAA
        AP8AAAC0AAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAIsAAAD8AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADtAAAAkAAAADMAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAwAAAAiwAA
        AOoAAAD/AAAA/wAAAP8AAAC1AAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAA
        AI0AAAD8AAAA/wAAAP8AAAD/AAAA0gAAAEYAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAQQAAAM0AAAD/AAAA/wAAAP8AAACSAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAPQAAAPIAAAD/AAAA/wAAANIAAAAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKwAAAM0AAAD/AAAA/wAAAPMAAABLAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAMAAACZAAAA/wAAAP8AAADtAAAARgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAAAOkAAAD/AAAA/wAAALQAAAAMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKwAAAOYAAAD/AAAA/wAAAJAAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhwAAAP8AAAD/AAAA8AAA
        AEYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAA/wAAAP8AAADrAAAAMwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAA5gAA
        AP8AAAD/AAAAkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAKQAAAD/AAAA/wAAALsAAAAJAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAYAAACzAAAA/wAAAP8AAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAxgAAAP8AAAD/AAAAjgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIUAAAD/AAAA/wAAAO0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAAADWAAAA/wAA
        AP8AAAB2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAbAAAAP8AAAD/AAAA+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAA
        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
        AAD4AAAA/AAAAPwAAAD+AAAB/wAAA/+AAAc=
</value>
  </data>
</root>